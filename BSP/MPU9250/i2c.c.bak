/****************************************Copyright (c)****************************************************
**                                       辽宁科技大学
**                                     
**                                         电子协会
**
**--------------File Info---------------------------------------------------------------------------------
** File Name:           i2c.c
** Last modified Date: 
** Last Version: 
** Description:         stm32f10x单片机I2C外设源文件
** 
**--------------------------------------------------------------------------------------------------------
** Created By:          王恺
** Created date:        2013/11/14
** Version:             V1.0
** Descriptions: 
**
**--------------------------------------------------------------------------------------------------------
** Modified by:
** Modified date:
** Version:
** Description:
**
*********************************************************************************************************/


/*********************************************************************************************************
	包含头文件
*********************************************************************************************************/
#include "i2c.h"


/*********************************************************************************************************
	声明已定义的函数
*********************************************************************************************************/
static void I2C_GPIO_Init(void);											/*	I2C GPIO初始化			*/
static void I2C_Mode_Init(u16 __addr, u32 __speed);							/*	I2C模式配置				*/


/*********************************************************************************************************
	定义全局变量
*********************************************************************************************************/
u8 I2C_DeviceAddr = 0;														/*	I2C设备地址				*/


/*********************************************************************************************************
** Function name:       I2C_GPIO_Init
** Descriptions:        I2C GPIO初始化
** input parameters:    none
** output parameters:   none
** Returned value:      none
*********************************************************************************************************/
static void I2C_GPIO_Init(void)
{
	GPIO_InitTypeDef  GPIO_InitStructure; 

	#ifdef __I2C_PB6ANDPB7__
	 #ifdef __I2C_DEFINED
	  #error			//定义多个端口
	 #endif
	 #define __I2C_DEFINED
	/* 使能与 I2C1 有关的时钟 */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1,ENABLE);  

	/* PB6-I2C1_SCL、PB7-I2C1_SDA*/
	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_7;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;			// 开漏输出
	GPIO_Init(GPIOB, &GPIO_InitStructure);
	#endif
}


/*********************************************************************************************************
** Function name:       I2C_Mode_Init
** Descriptions:        I2C模式配置
** input parameters:    __addr:			设备地址
**						__speed:		时钟频率
** output parameters:   none
** Returned value:      none
*********************************************************************************************************/
static void I2C_Mode_Init(u16 __addr, u32 __speed)
{
	I2C_InitTypeDef  I2C_InitStructure; 

	/* I2C 配置 */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_OwnAddress1 =__addr; 
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable ;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = __speed;

	/* 使能 I2C1 */
	I2C_Cmd(I2C1, ENABLE);

	/* I2C1 初始化 */
	I2C_Init(I2C1, &I2C_InitStructure);
}


/*********************************************************************************************************
** Function name:       IIC_Init
** Descriptions:        I2C初始化
** input parameters:    __addr:			设备地址
**						__speed:		时钟频率
** output parameters:   none
** Returned value:      none
*********************************************************************************************************/
void IIC_Init(u16 __addr, u32 __speed)
{
	I2C_GPIO_Init();
	I2C_Mode_Init(__addr, __speed);
}


/*********************************************************************************************************
** Function name:       I2C_BufferRead
** Descriptions:        I2C读取一段数据
** input parameters:    pBuffer：		存放从I2C总线读取的数据的缓冲区指针
**						ReadAddr:		设备地址
**						NumByteToRead:	字节数
** output parameters:   none
** Returned value:      none
*********************************************************************************************************/
void I2C_BufferRead(u8* pBuffer, u8 ReadAddr, u16 NumByteToRead)
{
	//*((u8 *)0x4001080c) |=0x80; 
	while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY)); // Added by Najoua 27/08/2008

	/* Send START condition */
	I2C_GenerateSTART(I2C1, ENABLE);
	//*((u8 *)0x4001080c) &=~0x80;

	/* Test on EV5 and clear it */
	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));

	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, I2C_DeviceAddr, I2C_Direction_Transmitter);

	/* Test on EV6 and clear it */
	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));

	/* Clear EV6 by setting again the PE bit */
	//  I2C_Cmd(I2C1, ENABLE);

	/* Send the EEPROM's internal address to write to */
	I2C_SendData(I2C1, ReadAddr);  

	/* Test on EV8 and clear it */
	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C1, ENABLE);

	/* Test on EV5 and clear it */
	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(I2C1, I2C_DeviceAddr, I2C_Direction_Receiver);

	/* Test on EV6 and clear it */
	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));

	/* While there is data to be read */
	while(NumByteToRead)  
	{
		if(NumByteToRead == 1)
		{
			/* Disable Acknowledgement */
			I2C_AcknowledgeConfig(I2C1, DISABLE);

			/* Send STOP Condition */
			I2C_GenerateSTOP(I2C1, ENABLE);
		}

		/* Test on EV7 and clear it */
		if(I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED))
		{
			/* Read a byte from the EEPROM */
			*pBuffer = I2C_ReceiveData(I2C1);

			/* Point to the next location where the byte read will be saved */
			pBuffer++;

			/* Decrement the read bytes counter */
			NumByteToRead--;
		}
	}

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(I2C1, ENABLE);
}


/*********************************************************************************************************
** Function name:       I2C_BufferWrite
** Descriptions:        I2C写入单字节数据
** input parameters:    data：			要写入的数据
**						WriteAddr:		设备地址
** output parameters:   none
** Returned value:      none
*********************************************************************************************************/
void I2C_BufferWrite(u8 data, u8 WriteAddr)
{
	//*((u8 *)0x4001080c) |=0x80; 
	while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY)); // Added by Najoua 27/08/2008

	/* Send START condition */
	I2C_GenerateSTART(I2C1, ENABLE);
	//*((u8 *)0x4001080c) &=~0x80;

	/* Test on EV5 and clear it */
	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));

	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, I2C_DeviceAddr, I2C_Direction_Transmitter);

	/* Test on EV6 and clear it */
	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));

	/* Clear EV6 by setting again the PE bit */
	//  I2C_Cmd(I2C1, ENABLE);

	/* Send the EEPROM's internal address to write to */
	I2C_SendData(I2C1, WriteAddr);  

	/* Test on EV8 and clear it */
	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));

	/* Send the data to write to */
	I2C_SendData(I2C1, data);  

	/* Test on EV8 and clear it */
	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
	
	/* Send STOP Condition */
	I2C_GenerateSTOP(I2C1, ENABLE);
	
}
